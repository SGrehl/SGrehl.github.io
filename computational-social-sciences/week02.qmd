---
title: "Week 02 - Social Network Analysis"
subtitle: "Network representations and basic manipulations in R"
---

Welcome to the second session of the seminar **Computational Social Sciences**

# Social networks

A **social network** consists of a set of **actors** that are connected by **relationships** in a pairwise manner [@wassermanSocialNetworkAnalysis2009]. Actors can represent individuals, groups, organizations, companies, or even entire countries. The nature of these relationships varies and can be defined in different ways, such as:

-   **Similarity-based relationships** (e.g., shared interests, attributes, or behaviors)
-   **Role- and position-based relationships** (e.g., hierarchies, affiliations, or professional connections)
-   **Resource-transfer relationships** (e.g., exchange of information, goods, or support)

Networks are commonly visualized in plots by **nodes** (usually circles), representing the actors and **edges** (lines or arrows) , representing the relationships.

```{r}


library(igraph)
library(ggraph)
library(ggplot2)

# Set seed for reproducibility
set.seed(123)

# Generate a random graph with 30 nodes and 50 edges
g <- erdos.renyi.game(n = 60, p.or.m = 70, type = "gnm", directed = FALSE)

# Assign random colors to nodes
V(g)$color <- sample(c("blue", "green"), vcount(g), replace = TRUE)

# Assign random sizes to nodes
V(g)$size <- sample(5:12, vcount(g), replace = TRUE)

  # Plot the network using ggraph
p1 <-ggraph(g, layout = "fr") + 
      geom_edge_link(color = "lightgray", alpha = 0.5) +
      geom_node_point(aes(size = size, color = color), alpha = 0.8) +
      scale_color_manual(values = c("blue" = "#967bb6", "green" = "#e8bff7")) +
      theme_void() +
      theme(legend.position = "none")
  


```

![Social network with nodes and edges](Graphics/definition.png)

# Social Network Analysis

(Content from Omar Lizardo) In the context of social network analysis from a sociological perspective, we typically discuss two broad aspects.

One of these aspects revolves around **network theories**, which explore how individuals behave within social contexts and how networks themselves evolve and function. Central questions in this area include: Where do network relationships originate? How are they formed? And what are the implications and consequences of these relationships for the people involved [@lizardoSocialNetworksIntroduction2023]?

#### Excercise

::: student-exercise
Reflect briefly on the occasions, where in the past you have been confronted with social networks theories. In what theoretical concepts of sociology is the embedding of actors of central importance?
:::

The other big branch focuses mostly on the description of networks and on how to measure various network properties. It links social network contexts to a quantitative representation.

In this class we will try to have a look at both "faces" of social network analysis. We will learn some of the basic concepts and how they connect to measurable network properties.

## From ties to graphs

Imagine you where to plot all relationships of all people in the world. Of course, this is just not possible, as the measurement but also the representation would be too complex. Thus we need some kind of (theoretical) bounds, that make the analysis of networks possible.

In social network analysis, we use **graphs** to represent social networks. We borrow graphs from the mathematical **graph theory** which also provides us with a definition [@joshiGentleIntroductionGraph2017].

A **graph** $G$ consists of a vertex set $V$ and an **edge set** $E$:

$$
G = \{V, E\}
$$

where $V$ is a set of nodes $V=\{v_1,v_2,v_3\}$ and $E$ being a set of edges $E = \{\{v_1,v_2\},\{v_2,v_3\}\}$.

By using set theory, we can rigorously define different types of graphs, operations on graphs, and concepts like **subgraphs, neighbourhoods, or connectivity**.

::: {#custom-block}
**Short Digression: Set Theory**

**Sets** are collections of distinct **elements**. The order and repitition of elements in a set does not matter.

| Symbol | Usage | Interpretation in Graphs |
|-----------------|-----------------|--------------------------------------|
| $\emptyset$ | $\{\}$ | Empty set (e.g., a graph with no edges) |
| $\cup$ | $A \cup B$ | Union of sets (e.g., merging vertex or edge sets) |
| $\cap$ | $A \cap B$ | Intersection of sets (e.g., common neighbors) |
| $\setminus$ | $A \setminus B$ | Set difference (e.g., removing edges or vertices) |
| $\times$ | $A \times B$ | Cartesian product (e.g., possible edge pairs in a complete graph) |
| $\mathfrak{P}()$ | $\mathfrak{P}(A)$ | Power set (e.g., all possible subsets of vertices or edges) |
| $\subset$ | $A \subset B$ | Subset (e.g., a subgraph is a subset of a larger graph) |
| $\in$ | $x \in A$ | Element in a set (e.g., a vertex in a vertex set) |
| $\notin$ | $x \notin A$ | Element not in a set (e.g., a missing edge in a sparse graph) |
:::

## Types of graphs

In social network analysis, we distinguish between **directed** and **undirected** networks. In most real-world cases, **directed networks** are more realistic because relationships are often asymmetric. However, **undirected networks** are easier to analyze mathematically and computationally.

#### Directed Networks

Directed networks represent relationships where the connection has a defined direction. These relationships do not necessarily have to be reciprocal.

$$
\forall A,B \in V:(A \to B) \not\Rightarrow (B \to A)
$$

**Examples:**\
- **Social media interactions**: On Twitter or Instagram, one user can follow another without being followed back.\
- **Communication networks**: E-Mails, phone calls or other forms of communication, can be sent out or received, thus defining a direction.

**Note**: In a **directed graph**, the edges are **ordered**, meaning the edge ( (a, b) ) is **not** the same as ( (b, a) ). The direction of the edge matters, and there is a one-way connection from ( a ) to ( b ) (but not necessarily the other way around).

<div>

Edges in directed graphs are representations of ordered pairs (**tuples**), where the order of the vertices does matter. We can write these as $E = \{(a,b), (b, c), (c, d), (d, a)\}$.

</div>

#### Undirected Networks

Undirected networks assume that if a connection exists, it is inherently mutual. These networks are simpler to analyze since they do not require considering directionality.

$$
\forall A, B \in V: (A \leftrightarrow B) \Rightarrow (B \leftrightarrow A)
$$

**Examples:**\
- **Mutual friendships**: In many studies, friendship networks are assumed to be undirected, meaning if A considers B a friend, B also considers A a friend (although this is not always the case in reality).\
- **Co-authorship networks**: If two researchers have co-authored a paper together, the connection exists for both equally.\
- **Collaboration networks**: In corporate or scientific collaborations, individuals or institutions work together on projects, making the relationship inherently bidirectional. - **Classmates**

**Note**: In an **undirected graph**, the edges are **unordered**, meaning the edge ( {a, b} ) is the same as ( {b, a} ). The connection between ( a ) and ( b ) has no direction, and this is reflected by the use of **unordered pairs** in the edge set.

In practice, the choice between directed and undirected networks depends on the research question. If directionality is crucial (e.g., influence, hierarchy, or information flow), a **directed network** is necessary. However, if the goal is to analyze overall connectivity, **undirected networks** provide a simpler approach.

```{r}
library(patchwork)  # For arranging plots


# Generate a random graph with 30 nodes and 50 edges
g2 <- erdos.renyi.game(n = 60, p.or.m = 70, type = "gnm", directed = TRUE)

# Assign random colors to nodes
V(g2)$color <- sample(c("blue", "green"), vcount(g2), replace = TRUE)

# Assign random sizes to nodes
V(g2)$size <- sample(5:12, vcount(g2), replace = TRUE)

  # Plot the network using ggraph
p1 <- ggraph(g, layout = "fr") + 
      geom_edge_link(color = "lightgray", alpha = 0.5) +
      geom_node_point(aes(size = size, color = color), alpha = 0.8) +
      scale_color_manual(values = c("blue" = "#967bb6", "green" = "#e8bff7")) +
      theme_void() +
      theme(legend.position = "none") +
      ggtitle("Undirected Network")

# Create the directed network plot
p2 <- ggraph(g2, layout = "fr") + 
  geom_edge_link(arrow = arrow(length = unit(1.5, "mm"), type = "closed"), color = "lightgray", alpha = 0.5) +
  geom_node_point(aes(size = size, color = color), alpha = 0.8) +
  scale_color_manual(values = c("blue" = "#967bb6", "green" = "#e8bff7")) +
  theme_void() +
  theme(legend.position = "none") +
  ggtitle("Directed Network")

# Arrange the two plots side by side
p1 + p2


```

![](Graphics/undirected_directed.png)

## Network representations

In academic research, networks are often represented as graphs. For small datasets, this visualization is quite intuitive. A quick glance at such a diagram can give us a good sense of the network's structure.

However, as networks grow larger, this representation quickly reaches its limits. With hundreds, thousands, or even millions of nodes and edges, we end up with what network analysts call a “hairball”—a dense, tangled structure from which little insight can be gained.

This is why, alongside graphical representations, there are other, mathematically more powerful approaches. While they may seem less intuitive, they allows for precise calculations and the analysis of large networks. While graphs help us visually grasp networks, **matrices** or **edge lists** serve as the essential tools for conducting complex computations in network analysis.

#### Adjacency matrices

To analyize large networks effectively, we often use **adjacency matrices**. An adjancey matrix $A$ is a square matrix used to represent a finite graph. Each row and column correspond to a node in a network. The entries of the matrix indicate whether a connection exists between two nodes.

In the simplest form, the matrix contains binary values:

$$
A = (A_{ij})_{i,j \in V},\text{ where }
A_{ij} =
\begin{cases} 
1, & \text{if there is an edge between node } i \text{ and node } j \\
0, & \text{otherwise}
\end{cases}
$$

For an **undirected graph**, the adjacency matrix is **symmetric**, meaning $A_{ij} = A_{ji}$. In contrast, for a **directed graph**, the matrix is generally **asymmetric**, where $A_{ij} = 1$ indicates a directed edge from node $i$ to node $j$, but not necessarily vice versa.

![Representation as adjacency matrices](Graphics/adjacency%20matrices.png)

<div>

By using different values than 0 and 1 in $A$ , we can also represent a weight of a connection (e.g strength of a friendship, the frequency of interaction or any other meaningful measure of connection intensity).

</div>

#### Adjacency lists

Similiarly to the adjacency matrix a adjacency list stores the information if one node in a graph is connected to another, while being a lot more space efficient.

An adjacency list is a collection of lists, where each node has a list of its neighbours.

We can convert from an adjacency matrix to a adjacency list in the way that we iterate over the matrix $A$ and for each entry $A_{ij} = 1$, we add node $j$ to the adjacency list of node $i$.

|     | directed | undirected |
|-----|----------|------------|
| 1   | (4,7)    | (4,6,7)    |
| 2   | (3,7)    | (3,5,7)    |
| 3   | (2,6)    | (2,4,6)    |
| 4   | (1,3)    | (1,3,5)    |
| 5   | (2,4,7)  | (2,4,6,7)  |
| 6   | (1,3,5)  | (1,3,5,7)  |
| 7   | ()       | (1,2,5,6)  |

#### Edge lists

With even bigger networks it might be useful to even store networks in an edge list, where each edge is represented as a pair (or triplet in weighted graphs) indicating a connection between two nodes.

|   | directed | undirected |
|--------------------------|------------------------|-----------------------|
| V | 1, 2, 3, 4, 5, 6, 7 | 1, 2, 3, 4, 5, 6, 7 |
| E | (1,4), (1,7), (2,3), (2,7), (3,6), (5,7), (4,1), (6,1), (3,2), (5,2), (4,3), (6,3), (5,4), (6,5) | (1,4), (1,6), (1,7), (2,3), (2,5), (2,7), (3,2), (3,4), (3,6), (4,1), (4,3), (4,5), (5,2), (5,4), (5,6), (5,7), (6,1), (6,3), (6,5), (6,7), (7,1), (7,2), (7,5), (7,6) |

<div>

**Tip:**

-   Use an adjacency matrix if you need fast edge lookups.
-   Use an adjacency list for efficient traversal in sparse graphs.
-   Use an edge list when edges are dynamic or when importing/exporting graph data.

</div>

# Getting started in R

## Creating `igraph` objects

In `igraph` [@csardiIgraphInterfaceIgraph2025], a network object is an instance of the class *igraph*. There are multiple ways to create such an object, depending on the available data format:

-   `graph.formula`

-   `graph.adjlist`

-   `graph.edgelist`

-   `graph.adjacency`

-   `read.graph (can also read formats GraphML, Pajek, etc.)`

-   `graph.data.frame`

### Creating a graph from an adjacency matrix

**Directed graph**:

```{r}
#| code-fold: false

M <- matrix(c( 0, 1, 0, 0, 0,
               0, 0, 1, 0, 0,
               1, 1, 0, 0, 1,
               0, 1, 0, 0, 0,
               0, 1, 1, 0, 0), nrow = 5, byrow=TRUE)                 
g <- graph.adjacency(M, mode = "directed")

# Graph descriptives
summary(g)

V(g)  # List nodes
E(g)  # List edges

get.edgelist(g)  # Convert to edge list
get.adjacency(g) # Get adjacency matrix
get.adjlist(g, mode = "out") # Get adjacency list

vcount(g)  # Count vertices
ecount(g)  # Count edges

# Plot the graph
plot(g)
```

**Undirected graph**:

```{r}
#| code-fold: false

ug <- graph.adjacency(M, mode = "undirected")
ug
summary(ug)

V(ug)
E(ug)

get.edgelist(ug)
get.adjacency(ug)
get.adjlist(ug, mode = "out")

vcount(ug)
ecount(ug)

plot(ug)
```

**Accessing the Adjacency matrix**

```{r}
#| code-fold: false

get.adjacency(g)  # Retrieve adjacency matrix
g[]  # Print entire adjacency matrix
g[2,1]  # Check if an edge exists from node 2 to 1
g[1,2]  # Check edge from node 1 to 2
g[2,]   # Get all edges originating from node 2
sum(g[2,])  # Count outgoing connections from node 2
```

### Creating a graph from an edge list

```{r}
#| code-fold: false

edgelist <- rbind(c(1,2), c(1,3), c(2,3), c(2,4), c(3,2), c(5,3))
h <- graph.edgelist(edgelist)

plot(h)
```

### Creating a graph from formula

```{r}
#| code-fold: false
g <- graph.formula(1--2, 2--3, 3--5, 4--2, 1--3, 2--5)

plot(g)
```

## Adding node and edge attributes

Just the network itself does not hold a lot of information to analyze. In order to sensefully do so on a micro-level, we can add more data to our nodes and edges.

| Category        | Example Values                                    |
|-----------------|---------------------------------------------------|
| Nodes           | (1,2,3,4)                                         |
| Edges           | {(1,2), (2,3), (2,4)}                             |
| Node attributes | Gender, Age, Income, Status                       |
| Edge attributes | Strength, Valence (positive, negative), Frequency |
| Metadata        | Directed, loops, etc.                             |

```{r}
#| code-fold: false

# Assign names to nodes
V(g)$name <- c("A", "B", "C", "D", "E")

plot(g)


E(g)$weight <- c(1.2, 2.3, 1.8, 3.0, 2.1, 1.5)

plot(g, edge.width = E(g)$weight)  # Visualizing edge weights
```
