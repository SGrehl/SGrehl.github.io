---
title: "Calibrate Income"
editor: visual
---

```{r}
library(tidyverse)
library(stats)

income = read.csv("experimental-sociology/distribution-gross-monthly-earningsfull-time-employees.csv",
                  sep = ";",                 
                  header = TRUE,
                  dec = ",") %>% 
  mutate(Bruttomonatsverdienst = ifelse(Bruttomonatsverdienst == "unter 100", "0 – 100", Bruttomonatsverdienst)) %>% 
  slice(-n()) %>% # Drop the last row
  separate(Bruttomonatsverdienst, into = c("min_income", "max_income"), sep = " – ", convert = TRUE) 


sum_Anteil <- sum(income$Anteil)

income <- income %>% 
  transmute( 
    share = Anteil / sum_Anteil,
    min_income = as.numeric(gsub(" ", "", min_income, fixed = TRUE)),
    max_income = as.numeric(gsub(" ", "", max_income, fixed = TRUE))
  )



# Define the objective function: sum of squared differences
objective_function <- function(params, data) {
  mu    <- params[1]
  sigma <- params[2]
  
  # Calculate predicted share for each bracket
  predicted <- plnorm(data$max_income, meanlog = mu, sdlog = sigma) -
    plnorm(data$min_income, meanlog = mu, sdlog = sigma)
  
  # Return sum of squared errors between predicted and observed shares
  sum((predicted - data$share)^2)
}

# Set an initial guess for mu and sigma
# For instance, we can set mu = log(4634) (the average income in Germany) and sigma = 1.
init_params <- c(mu = log(4634),
                 sigma = 1)

# Optimize using L-BFGS-B (constraining sigma > 0)
opt_result <- optim(
  par    = init_params,
  fn     = objective_function,
  data   = income,
  method = "L-BFGS-B",
  lower  = c(-Inf, 0.001)  # sigma must be positive
)

# Print the optimal parameters
opt_result$par

```

```{r}
set.seed(12345)
n <- 1000
fictional_incomes <- rlnorm(n, meanlog = opt_result$par[1] , sdlog = opt_result$par[2])
fictional_data <- data.frame(Income = fictional_incomes)

```

```{r}
library(plotly)

# Create an interactive histogram using Plotly
plot_ly(
  fictional_data, 
  x = ~Income, 
  type = "histogram", 
  nbinsx = 200,
  hovertemplate = 'Income: %{x:.2f}<br>Count: %{y}<extra></extra>'
) %>%
  layout(
    title = "Interactive Histogram of Fictional Incomes",
    xaxis = list(title = "Income"),
    yaxis = list(title = "Count")
  )

```
